<!DOCTYPE html>
<html>
  <head>
    <title>Hand Watch</title>
    <link rel="stylesheet" href=""/stylesheets/style.css" />
      <script src="/bower_components/d3/d3.js"></script>

      <script type="text/javascript" src="/bower_components/sockjs-client/dist/sockjs.js"></script>
      <script type="text/javascript" src="/bower_components/underscore/underscore-min.js"></script>

      <style>
          svg {
              font: 10px sans-serif;
          }

          .line {
              fill: none;
              stroke: #000;
              stroke-width: 2px;
          }

          .lineacc {
              stroke: red;
          }

          .linerot {
              stroke: steelblue;
          }

          .axis path,
          .axis line {
              fill: none;
              stroke: #000;
              shape-rendering: crispEdges;
          }
      </style>
  </head>
  <body>
    <h1>Handwatch Motion</h1>

    <script>
        var n = 40,
            zeros = d3.random.normal(0, 0),
            data = {
                acc: d3.range(n).map(zeros),
                rot: d3.range(n).map(zeros)
            };

        var lines = {},
            paths = {};

        var margin = {top: 20, right: 20, bottom: 20, left: 40},
                width = 960 - margin.left - margin.right,
                height = 500 - margin.top - margin.bottom;

        var x = d3.scale.linear()
                .domain([0, n - 1])
                .range([0, width]);

        var y = d3.scale.linear()
                .domain([-50, 50])
                .range([height, 0]);

        var svg = d3.select("body").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        svg.append("defs").append("clipPath")
                .attr("id", "clip")
                .append("rect")
                .attr("width", width)
                .attr("height", height);

        svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(d3.svg.axis().scale(x).orient("bottom"));

        svg.append("g")
                .attr("class", "y axis")
                .call(d3.svg.axis().scale(y).orient("left"));

        svg.append("text")
                .attr("transform", "translate(" + 5 + "," + 10 + ")")
                .attr("dy", ".35em")
                .attr("text-anchor", "start")
                .style("fill", "red")
                .text("_____ Acceleration");

        svg.append("text")
                .attr("transform", "translate(" + 5 + "," + 20 + ")")
                .attr("dy", ".35em")
                .attr("text-anchor", "start")
                .style("fill", "steelblue")
                .text("_____ Rotation");

        var lineGroup = svg.append("g")
                .attr("class", "lines");

        Object.keys(data).forEach(function (d) {
            lines[d] = d3.svg.line()
                .x(function (d, i) {
                    return x(i);
                })
                .y(function (d, i) {
                    return y(d);
                });

            paths[d] = lineGroup.append("g")
                .attr("clip-path", "url(#clip)")
                .append("path")
                .datum(data[d])
                .attr("class", "line line" + d)
                .attr("d", lines[d]);
        });

        var sock = new SockJS('/motion');

        sock.onmessage = function (e) {
            var dataObj = JSON.parse(e.data);
            data.acc.push( // Take the root mean square of the acceleration vector and subtract gravity
                Math.sqrt(
                    Math.pow(dataObj.acc.x, 2) +
                    Math.pow(dataObj.acc.y, 2) +
                    Math.pow(dataObj.acc.z, 2)
                ) - 9.82
            );

            data.rot.push( // Take the root mean square of the rotation vector
                Math.sqrt(
                    Math.pow(dataObj.rot.alpha / 360 * 25, 2) +
                    Math.pow(dataObj.rot.beta / 360 * 25, 2) +
                    Math.pow(dataObj.rot.gamma / 360 * 25, 2)
                )
            );

            // Delete the first value and update the path
            Object.keys(data).map(function (d) {
                data[d].shift();
                paths[d].attr("d", lines[d]);
            });
        };
    </script>
  </body>
</html>
